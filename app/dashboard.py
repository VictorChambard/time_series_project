import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt


# Imports internes
from etl.extract import load_config, download_multiple_stocks
from etl.transform import clean_multivariate_data
from models.forecast import (
    estimer_var,
    estimer_vecm,
    preparer_rendements_log_mensuels,
    choisir_modele,
    tester_stationnarite_et_coint
)
from helpers.viz import (
    plot_adf_test,
    plot_cointegration_test,
    plot_forecast,
    plot_vecm_forecast,
    plot_vol_vs_pred

)
from helpers.volatilite import calcul_volatilite
from helpers.viz_irf import plot_irf_var
# === CONFIGURATION DE LA PAGE ===


st.set_page_config(page_title="Dashboard Volatilit√© VIX & S&P500", layout="wide")
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
selected_model = st.selectbox("Mod√®le s√©lectionn√© :", ["VECM", "VAR"])


# === TITRE ===
st.title("Dashboard de l'Analyse de la volatilit√© : VIX & S&P500")
st.markdown("""
Ce dashboard explore le lien entre la volatilit√© implicite du march√© (VIX) et l‚Äô√©volution du S&P500.  
L‚Äôobjectif est d‚Äôanalyser statistiquement les dynamiques conjointes √† travers des mod√®les VAR/VECM.

- Le **VIX** est souvent appel√© l‚Äô¬´ indice de la peur ¬ª, il refl√®te l‚Äôincertitude des investisseurs.
- Le **S&P500** est un indice repr√©sentatif de l‚Äô√©conomie am√©ricaine.
- Leur relation est souvent utilis√©e pour **anticiper les p√©riodes de crise**.

Nous cherchons √† :
1. Diagnostiquer les propri√©t√©s statistiques de ces s√©ries.
2. Choisir un mod√®le adapt√© (stationnarit√© / co-int√©gration).
3. Comparer les pr√©visions √† la volatilit√© r√©alis√©e (rolling std).
4. √âvaluer la qualit√© de pr√©diction en p√©riode de crise (COVID).
""")
# === √âTAPE 1 : Chargement des donn√©es ===
st.header("1. Chargement et aper√ßu des donn√©es")
config = load_config()
df_raw = download_multiple_stocks(config)
df = clean_multivariate_data(df_raw)
st.dataframe(df.head())
df.index = pd.DatetimeIndex(df["Date"])
df.index.freq = pd.infer_freq(df.index)
# === √âTAPE 2 : Visualisation des s√©ries temporelles ===
st.header("2. Visualisation des s√©ries temporelles")
cols = st.multiselect("Colonnes √† afficher :", df.columns.tolist(), default=df.columns.tolist())

if "Date" in df.columns:
    df_to_plot = df.set_index("Date")
else:
    df_to_plot = df.copy()

valid_cols = [col for col in cols if col in df_to_plot.columns]

if valid_cols:
    if "VIX_Close" in valid_cols and "GSPC_Close" in valid_cols:
        # Graphique double axe
        fig, ax1 = plt.subplots(figsize=(10, 4))

        ax1.plot(df_to_plot.index, df_to_plot["GSPC_Close"], color='tab:blue', label="S&P500")
        ax1.set_ylabel("S&P500", color='tab:blue')
        ax1.tick_params(axis='y', labelcolor='tab:blue')

        ax2 = ax1.twinx()
        ax2.plot(df_to_plot.index, df_to_plot["VIX_Close"], color='tab:red', label="VIX")
        ax2.set_ylabel("VIX", color='tab:red')
        ax2.tick_params(axis='y', labelcolor='tab:red')

        ax1.set_title("S&P500 vs VIX (double axe)")
        fig.tight_layout()
        st.pyplot(fig)

    else:
        st.line_chart(df_to_plot[valid_cols])
else:
    st.warning("Aucune des colonnes s√©lectionn√©es n'est valide.")

# === √âTAPE 3 : Tests de stationnarit√© et co-int√©gration ===
st.header("3. Tests de stationnarit√© et co-int√©gration")
if st.button("Lancer les tests de stationnarit√© et de co-int√©gration"):
    tester_stationnarite_et_coint()

# === √âTAPE 4 : Pr√©diction ===
st.header("4. Pr√©vision de la volatilit√©")
st.markdown("En fonction des tests statistiques, le mod√®le VAR ou VECM est automatiquement s√©lectionn√©.")
model_choice = st.selectbox("Choisir le mod√®le de pr√©vision :", ["Auto (choix bas√© sur les tests)", "VAR", "VECM"])
if st.button("Lancer la pr√©vision"):
    if model_choice == "Auto (choix bas√© sur les tests)":
        selected_model = choisir_modele()
        st.write("Mod√®le s√©lectionn√© automatiquement :", selected_model)
    else:
        selected_model = model_choice

    if selected_model == "VAR":
        rendements = preparer_rendements_log_mensuels()
        resultats_var = estimer_var(rendements)
        st.session_state.resultats_var = resultats_var  # üîÅ on le stocke
        st.session_state.selected_model = "VAR"
        st.subheader("Pr√©vision avec mod√®le VAR")
        plot_forecast(resultats_var.fittedvalues, title="Pr√©vision VAR en √©chantillon")

    elif selected_model == "VECM":
        resultat_vecm = estimer_vecm()
        st.session_state.resultat_vecm = resultat_vecm  # üîÅ on le stocke aussi
        st.session_state.selected_model = "VECM"
        st.subheader("Pr√©vision avec mod√®le VECM")
        plot_vecm_forecast(resultat_vecm)

# === √âTAPE 5 : Conclusion Rapide ===
st.header("5. Conclusion")
st.markdown("""
- Les tests ADF et Johansen permettent de diagnostiquer la stationnarit√© et les relations de long terme.
- Les mod√®les VAR sont adapt√©s aux s√©ries stationnaires.
- Le VECM permet d‚Äôexploiter les relations de co-int√©gration pour des s√©ries non stationnaires.
- Le mod√®le est s√©lectionn√© automatiquement selon les r√©sultats des tests.
""")

# === √âTAPE 6 : Comparaison avec la volatilit√© r√©alis√©e ===

st.header("6. Comparaison : Volatilit√© R√©elle vs Pr√©vision VIX")
vix_real = df["VIX_Close"]
vol_realisee = calcul_volatilite(vix_real)

selected_model = st.session_state.get("selected_model", None)

if selected_model == "VAR":
    resultats_var = st.session_state.get("resultats_var", None)
    if resultats_var is not None:
        pred_vix = resultats_var.fittedvalues["VIX_Close"]
        plot_vol_vs_pred(vol_realisee, pred_vix)
    else:
        st.warning("Le mod√®le VAR n'a pas encore √©t√© estim√©.")
elif selected_model == "VECM":
    resultat_vecm = st.session_state.get("resultat_vecm", None)
    if resultat_vecm is not None:
        pred_vix = resultat_vecm.predict(steps=len(df))[:, 0]
        pred_vix = pd.Series(pred_vix, index=df.index[-len(pred_vix):])
        plot_vol_vs_pred(vol_realisee, pred_vix)
    else:
        st.warning("Le mod√®le VECM n'a pas encore √©t√© estim√©.")
        
# === √âTAPE 7 : Crise Covid ===

st.header("7. Focus sur la p√©riode COVID (2020-2021)")
st.markdown("""
La crise sanitaire de 2020 a provoqu√© une volatilit√© extr√™me.  
Nous analysons ici comment le mod√®le se comporte sur cette p√©riode critique.
""")
df_zoom = df[["VIX_Close", "GSPC_Close"]].loc["2020":"2021"]

fig, ax1 = plt.subplots(figsize=(10, 4))

ax1.plot(df_zoom.index, df_zoom["GSPC_Close"], color='tab:blue', label="S&P500")
ax1.set_ylabel("S&P500", color='tab:blue')
ax1.tick_params(axis='y', labelcolor='tab:blue')

ax2 = ax1.twinx()
ax2.plot(df_zoom.index, df_zoom["VIX_Close"], color='tab:red', label="VIX")
ax2.set_ylabel("VIX", color='tab:red')
ax2.tick_params(axis='y', labelcolor='tab:red')

ax1.set_title("S&P500 vs VIX pendant la crise COVID (2020‚Äì2021)")
fig.tight_layout()
st.pyplot(fig)

# === √âTAPE 8 : Fonctions de r√©ponse impulsionnelle ===

if selected_model == "VAR":
    st.header("8. Fonctions de r√©ponse impulsionnelle (IRF)")
    st.markdown("""
Les IRF permettent d‚Äôanalyser l‚Äôimpact dynamique d‚Äôun choc sur une variable (ex : S&P500) sur une autre (ex : VIX).
""")
    plot_irf_var(resultats_var)
elif selected_model == "VECM":
    st.header("8. Fonctions de r√©ponse impulsionnelle (IRF)")
    st.markdown("""
L'analyse des IRF dans un mod√®le VECM n√©cessite des outils plus avanc√©s et n‚Äôest pas int√©gr√©e ici.  
Il serait pertinent de l'ajouter dans une future extension avec orthogonalisation.
""")


# === √âTAPE 9 : Lecture critique ===

st.header("9. Lecture critique des r√©sultats")
st.markdown("""
- Le VIX capte bien la nervosit√© des march√©s, mais sa pr√©diction reste difficile en p√©riode de choc.
- Les mod√®les VAR supposent la stationnarit√©, ce qui peut √™tre une hypoth√®se forte.
- Les VECM int√®grent une relation de long terme mais ne capturent pas les ruptures brutales (comme COVID).
- Une am√©lioration future pourrait passer par l‚Äôintroduction de ruptures structurelles ou de mod√®les GARCH.
""")

# === √âTAPE 10 : Informations sur le projet ===
st.header("10. Informations sur le projet")
st.markdown("""
Projet r√©alis√© par le groupe N dans le cadre du cours de Python de Fabrice Galan, avec Streamlit et Python.

**Membres du groupe :**  
- Victor Chambard  
- Niama El Kamal  
- Youssef Saied

**Donn√©es :** Yahoo Finance ¬∑ P√©riode : 2018‚Äì2024.  
**R√©f√©rence acad√©mique utilis√©e :**  
- Zhang, B., Hu, Y., & Ji, Q. (2020). Financial markets under the global pandemic of COVID-19. *Finance Research Letters*, 36, 101528.
- Becker, R., Clements, A. E., & McClelland, A. (2022). *Forecasting Realized Volatility and VIX: A comparison of VAR and Machine Learning Models*.
- Datacamp
- TD du cours
- lien pour les packages : 
- https://www.statsmodels.org/stable/vector_ar.html
- https://www.statsmodels.org/stable/generated/statsmodels.tsa.stattools.adfuller.html
- https://docs.streamlit.io/
- https://www.statsmodels.org/stable/index.html
""")
